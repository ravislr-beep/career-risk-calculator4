import type { NextApiRequest, NextApiResponse } from 'next'
import PDFDocument from 'pdfkit'
import { getSupabaseAdmin } from '../../../lib/supabaseClient'

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { id } = req.query
  if (!id) return res.status(400).send('Missing id')
  const supabaseAdmin = getSupabaseAdmin()
  const { data, error } = await supabaseAdmin.from('profiles').select('*, app_users(full_name,email,avatar_url)').eq('id', id).single()
  if (error || !data) return res.status(404).json({ error: 'Profile not found' })

  const details = data.risk_details ?? {}
  const explainability = [
    { factor: 'Skills relevance', text: `Risk ${details.skillsRisk ?? 'N/A'}` },
    { factor: 'Performance', text: `Risk ${details.performanceRisk ?? 'N/A'}` },
    { factor: 'Network', text: `Risk ${details.networkRisk ?? 'N/A'}` },
  ]

  const recs = data.llm_recommendations ?? [
    'Take a focused certification to bridge key skill gaps.',
    'Build high-impact portfolio items and publish results on LinkedIn.',
    'Request a 30/60/90 growth plan with your manager.'
  ]

  const doc = new PDFDocument({ margin: 40, size: 'A4' })
  res.setHeader('Content-Type', 'application/pdf')
  res.setHeader('Content-Disposition', `attachment; filename="career-risk-${data.id}.pdf"`)

  doc.pipe(res)

  doc.fontSize(18).text('Career Risk Report', { align: 'center' })
  doc.moveDown()
  doc.fontSize(12).text(`Name: ${data.full_name || data.app_users?.full_name || '—'}`)
  doc.text(`Email: ${data.email || data.app_users?.email || '—'}`)
  doc.text(`Risk score: ${data.risk_score} (${data.risk_score <= 30 ? 'Low' : data.risk_score <= 60 ? 'Medium' : 'High'})`)
  doc.moveDown()

  // Include LLM narrative if present
  if (data.llm_explain) {
    doc.fontSize(14).text('LLM Explainability Narrative', { underline: true })
    doc.moveDown(0.3)
    doc.fontSize(11).text(String(data.llm_explain))
    doc.moveDown()
  } else {
    doc.fontSize(14).text('Explainability', { underline: true })
    explainability.forEach((e: any) => {
      doc.moveDown(0.3)
      doc.fontSize(11).text(`${e.factor}: ${e.text}`)
    })
    doc.moveDown()
  }

  doc.fontSize(14).text('Action Plan', { underline: true })
  recs.forEach((r:any, idx:number) => {
    doc.moveDown(0.2)
    doc.fontSize(11).text(`${idx+1}. ${r}`)
  })

  doc.moveDown()
  doc.fontSize(10).text('Generated by Career Risk Calculator — Phase 2 (Deepseek LLM)', { align: 'center' })

  doc.end()
}
